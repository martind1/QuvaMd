// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Quva.Database.Models;

public partial class QuvaContext : DbContext
{
    public QuvaContext(DbContextOptions<QuvaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Device> Device { get; set; }

    public virtual DbSet<DeviceParameter> DeviceParameter { get; set; }

    public virtual DbSet<Location> Location { get; set; }

    public virtual DbSet<MappingWorkplaceDevice> MappingWorkplaceDevice { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("T_QUVA_API");

        modelBuilder.Entity<Device>(entity =>
        {
            entity.ToTable("DEVICE", "QUVA_API");

            entity.HasIndex(e => new { e.Code, e.IdLocation }, "UK_DEVICE_CODE").IsUnique();

            entity.HasIndex(e => new { e.Name, e.IdLocation }, "UK_DEVICE_NAME").IsUnique();

            entity.Property(e => e.Id)
                .HasPrecision(18)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("DATE")
                .HasColumnName("CHANGE_DATE");
            entity.Property(e => e.ChangeNumber)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CHANGE_NUMBER");
            entity.Property(e => e.ChangeUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CHANGE_USER");
            entity.Property(e => e.Code)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CODE");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("sysdate ")
                .HasColumnType("DATE")
                .HasColumnName("CREATE_DATE");
            entity.Property(e => e.CreateUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CREATE_USER");
            entity.Property(e => e.DeviceType)
                .HasPrecision(9)
                .HasColumnName("DEVICE_TYPE");
            entity.Property(e => e.IdLocation)
                .HasPrecision(18)
                .HasColumnName("ID_LOCATION");
            entity.Property(e => e.ModuleCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODULE_CODE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.PackagingType)
                .HasPrecision(9)
                .HasColumnName("PACKAGING_TYPE");
            entity.Property(e => e.Paramstring)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("PARAMSTRING");
            entity.Property(e => e.Porttype)
                .HasPrecision(9)
                .HasColumnName("PORTTYPE");
            entity.Property(e => e.Roles)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("ROLES");
            entity.Property(e => e.TransportType)
                .HasPrecision(9)
                .HasColumnName("TRANSPORT_TYPE");

            entity.HasOne(d => d.IdLocationNavigation).WithMany(p => p.Device)
                .HasForeignKey(d => d.IdLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVICE_LOCATION");
        });

        modelBuilder.Entity<DeviceParameter>(entity =>
        {
            entity.ToTable("DEVICE_PARAMETER", "QUVA_API");

            entity.HasIndex(e => new { e.Key, e.IdDevice }, "UK_DEVICE_PARAMETER_KEY").IsUnique();

            entity.Property(e => e.Id)
                .HasPrecision(18)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("DATE")
                .HasColumnName("CHANGE_DATE");
            entity.Property(e => e.ChangeNumber)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CHANGE_NUMBER");
            entity.Property(e => e.ChangeUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CHANGE_USER");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("sysdate ")
                .HasColumnType("DATE")
                .HasColumnName("CREATE_DATE");
            entity.Property(e => e.CreateUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CREATE_USER");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.IdDevice)
                .HasPrecision(18)
                .HasColumnName("ID_DEVICE");
            entity.Property(e => e.Key)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KEY");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Value)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VALUE");

            entity.HasOne(d => d.IdDeviceNavigation).WithMany(p => p.DeviceParameter)
                .HasForeignKey(d => d.IdDevice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVICE_PARAMETER_DEVICE");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.ToTable("LOCATION", "QUVA_API");

            entity.HasIndex(e => e.Shortname, "LOCATION_SHORTNAME").IsUnique();

            entity.HasIndex(e => e.Name, "UK_LOCATION_SHORTNAME").IsUnique();

            entity.Property(e => e.Id)
                .HasPrecision(18)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("DATE")
                .HasColumnName("CHANGE_DATE");
            entity.Property(e => e.ChangeNumber)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CHANGE_NUMBER");
            entity.Property(e => e.ChangeUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CHANGE_USER");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("sysdate ")
                .HasColumnType("DATE")
                .HasColumnName("CREATE_DATE");
            entity.Property(e => e.CreateUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CREATE_USER");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Housenumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HOUSENUMBER");
            entity.Property(e => e.Location1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LOCATION");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Name1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME1");
            entity.Property(e => e.Name2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME2");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");
            entity.Property(e => e.Phone)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PHONE");
            entity.Property(e => e.Postcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POSTCODE");
            entity.Property(e => e.Shortname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SHORTNAME");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STREET");
        });

        modelBuilder.Entity<MappingWorkplaceDevice>(entity =>
        {
            entity.ToTable("MAPPING_WORKPLACE_DEVICE", "QUVA_API");

            entity.Property(e => e.Id)
                .HasPrecision(18)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("DATE")
                .HasColumnName("CHANGE_DATE");
            entity.Property(e => e.ChangeNumber)
                .HasPrecision(9)
                .HasDefaultValueSql("0 ")
                .HasColumnName("CHANGE_NUMBER");
            entity.Property(e => e.ChangeUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CHANGE_USER");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("sysdate ")
                .HasColumnType("DATE")
                .HasColumnName("CREATE_DATE");
            entity.Property(e => e.CreateUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CREATE_USER");
            entity.Property(e => e.IdDevice)
                .HasPrecision(18)
                .HasColumnName("ID_DEVICE");
            entity.Property(e => e.IdWorkplace)
                .HasPrecision(18)
                .HasColumnName("ID_WORKPLACE");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("NOTE");

        });


        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}